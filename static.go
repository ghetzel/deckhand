// Code generated by "esc -o static.go -pkg main -modtime 1500000000 -prefix ui ui"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_layouts/default.html": {
		local:   "ui/_layouts/default.html",
		size:    1897,
		modtime: 1500000000,
		compressed: `
H4sIAAAAAAAC/7RVSXPaTBA9f/yK/pRLXIWEhEPZIcAlTq7JwTnkOGga1GE0o5pptrj47yltSLJkcoqK
Qstr9fL6tXrx/9O3z88/v3+BhFO1Gi3qEwq5GgEsUmQBcSKsQ156P56/+o/eavRf+VyLFJfegfCYGcse
xEYzal56R5KcLCUeKEa/uBmTJiahfBcLhctonIoTpfu0vvdWozwcEytcPWG8S4SWi0l5X0COz/klAMDa
yDO8FJcAaxHvttbstfRjo4ydw7vpw/RxOv1UGVRPW8cxIcYaluQyJc4tg43CU43+2jumzdmvSpsDxKgZ
bY0LRVvtE2PqKg9dPEHaJtyOHoXhIanhgptObjl8rOFMSEl62zIIaygVdku6/eoV2hjN/kakpOqqnNDO
d2hpU9pcRsUpkBjvrkT+WyIG2hQVx9u1fmiIWBsr0fpWSNqX/qNg1uPJZ5NV739sv3vyXSKkOda+Qwgh
OhwhzE5gt2vxPhxD9QseZncDHAWZ2GIjuTIbl4m4yjjqpRobpUTmcA7gMBNWNIrrC7JDxUBgcaNJsFYm
3nWjd5yHQTSdHY7gjCJZ1judzcbQ/IXB/f1d7YHxxL7E2FjBZAqFaaNvJA+kE7TEb3e6O3At3GKGgueg
TXX59lxA1JqL/lR14L5aYNqgRYGFXK8OulI1B7Qb1cglD0hSor7KzTiquakOi0owHfBGC1cQkJZ4utXL
ik9FGv1OXwdClmO3dkbtW+QaZpP2XDYfB9tj7pXBAPUlg+2BG2hA36ioYsCyY9Sooevtrzqtmswm8xVu
+NrtVqeLD6Gj3/gq0da0Dsj59Yq45NtnUq2fxaRcjYt8B61eXoAxzZRgBK/6MnoQwOWymBQGuX2xUf8E
AAD//+AokPlpBwAA
`,
	},

	"/edit__id.html": {
		local:   "ui/edit__id.html",
		size:    357,
		modtime: 1500000000,
		compressed: `
H4sIAAAAAAAC/2yPMW+DMBSEd/+K01OGdAArKwoMUbdKVf9BcfELsRJsgg1VhPjv1YNUXerpdPL77i7L
MvXlvHW+jYUCMnjTcQF59MrNlZTIgWMYh4YLkLbcXC/GWz0dVh31POMeUdsateWzGW+pxrJoUkKfZ3y7
dMHuw7SMosTZDTGdHm/8wC7/zc4lK5cvEfRuOibs7xHUE+iTXrAsf6DTmFLwgmo5bdx88yL2vRlMh8N6
cbRuQnMzMZYkTalSwPEchm4dZZrkgi//W7Stfp72puXN6Dhdgi2pDzGJUykBaiFW6qitmyqpyd4+C2/q
JwAA//8A4YJgZQEAAA==
`,
	},

	"/index.html": {
		local:   "ui/index.html",
		size:    976,
		modtime: 1500000000,
		compressed: `
H4sIAAAAAAAC/3yTz46bMBDG7zzFyIqq5ABWr6yh0m5VqapUVaveGwdPiBXHJtgkS5HfvTKQjZPdLicz
f77fePhI0zTZSC2krm2eAKSg+QFzCA/5itWeJOHYojVdW2EOhAqs9juuBT19Hs+WDgMcLazFGtYCt7xT
bg3eU5IEdSbkCSrFrS1IKCdlAjAM0HJdIyx+8RohL2ArlcP2sf+BPSyyy0hZGCELNRbIT35AAsujBdIQ
IH/ICrxPAJjjG4UXRsNrHBkhsTGin84x89mcA9LisUNd4RvesznbSXpSaS8SsciTUR+KPBkViYydZ+l2
sHjsnDM69NbopgVkU8zCkgsBy0OnnGxU/75mGH818lexPnOiZPz1FWDX4rYgFIV04QvN3Oy7FvgC3n8R
RYjeEcKOwftPzZgcZ5tDJJK2rldYxBGADa/2dWs6LdLKKNPmEEG/SaXA+4ebjmEAub3OdQhOiC50JypD
PoeuVcv4NnPX6uF/fVb+xRwqox2X+s0AqMUt83qpMsL8xhcH3jPbcH0xmgyLJOU7q2U01JWM8pJRJ27c
cwe8jzB6ddttjtFXNzM6On7+keYaRoU8lf8CAAD//5Bu1ujQAwAA
`,
	},

	"/": {
		isDir: true,
		local: "ui",
	},

	"/_layouts": {
		isDir: true,
		local: "ui/_layouts",
	},
}
